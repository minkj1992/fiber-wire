{{template "base" .}}

{{define "content" }}
<div x-data="authModal" class="container mx-auto">
  <!-- Tailwind Modal -->
  <div
    x-show="showModal"
    class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full flex items-center justify-center"
    x-cloak
  >
    <div class="p-5 border w-96 shadow-lg rounded-md bg-white">
      <!-- Modal content -->
      <div class="text-center">
        <h3 class="text-lg font-medium text-gray-900" id="authModalLabel">
          Authentication
        </h3>
        <div class="mt-2 px-7 py-3">
          <input
            x-model="email"
            type="email"
            class="mt-3 px-4 py-2 border rounded-md w-full"
            placeholder="Enter email"
          />
          <input
            x-model="password"
            type="password"
            class="mt-3 px-4 py-2 border rounded-md w-full"
            placeholder="Enter password"
          />
        </div>
        <div class="flex justify-between items-center px-4 py-3">
          <button
            @click="showModal = false"
            class="px-4 py-2 bg-gray-500 text-white font-medium rounded-md shadow-sm hover:bg-gray-600"
          >
            Close
          </button>
          <button
            @click="submitAuth"
            class="px-4 py-2 bg-blue-500 text-white font-medium rounded-md shadow-sm hover:bg-blue-600"
          >
            Submit
          </button>
        </div>
      </div>
    </div>
  </div>
  <!-- Tailwind Modal -->

  <div x-bind:class="{'blur-sm': showModal}">
    <div class="row">
      <div class="col">
        <h1 class="mt-5">Test microservices</h1>
        <hr />
        <a
          id="brokerBtn"
          class="btn btn-outline-secondary"
          href="javascript:void(0);"
          >Test Broker</a
        >

        <button
          @click="showModal = true"
          id="authBrokerBtn"
          class="btn btn-outline-secondary"
        >
          Test Auth
        </button>

        <div
          id="output"
          class="mt-5"
          style="outline: 1px solid silver; padding: 2em"
        >
          <span class="text-muted">Output shows here...</span>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col">
        <h4 class="mt-5">Sent</h4>
        <div class="mt-1" style="outline: 1px solid silver; padding: 2em">
          <pre
            id="payload"
          ><span class="text-muted">Nothing sent yet...</span></pre>
        </div>
      </div>
      <div class="col">
        <h4 class="mt-5">Received</h4>
        <div class="mt-1" style="outline: 1px solid silver; padding: 2em">
          <pre
            id="received"
          ><span class="text-muted">Nothing received yet...</span></pre>
        </div>
      </div>
    </div>
  </div>
</div>
{{ end }}

  {{define "js"}}
  <script>
    const BROKER_URL = "http://localhost:8080";
    const brokerBtn = document.getElementById("brokerBtn");
    const output = document.getElementById("output");
    const sent = document.getElementById("payload");
    const received = document.getElementById("received");

    document.addEventListener("alpine:init", () => {
      Alpine.data("authModal", () => ({
        showModal: false,
        email: "",
        password: "",

        submitAuth() {
          if (!this.email || !this.password) {
            alert("Please enter both email and password.");
            return;
          }
          const payload = {
            action: "auth",
            auth: {
              email: this.email,
              password: this.password,
            },
          };

          // Fetch logic here
          fetch(`${BROKER_URL}/handle`, {
            method: "POST",
            headers: {
              "Content-Type": "application/json",
            },
            body: JSON.stringify(payload, "", 4),
          })
            .then((response) => response.json())
            .then((data) => {
              sent.innerHTML = JSON.stringify(payload, undefined, 4);
              received.innerHTML = JSON.stringify(data, undefined, 4);

              if (data.error) {
                output.innerHTML += `<br><strong>Error:</strong> ${data.message}`;
              } else {
                output.innerHTML += `<br><strong>Response from broker service</strong>: ${data.message}`;
              }
              this.showModal = false; // Close the modal
            })
            .catch((error) => {
              output.innerHTML += "<br><br>Eror: " + error;
            });

          // Reset fields
          this.email = "";
          this.password = "";
        },
      }));
    });

    brokerBtn.addEventListener("click", () => {
      const body = {
        method: "POST",
      };
      fetch(BROKER_URL, body)
        .then((response) => response.json())
        .then((data) => {
          sent.innerHTML = "empty post request";
          received.innerHTML = JSON.stringify(data, undefined, 4);
          if (data.error) {
            console.error(data.message);
          } else {
            output.innerHTML += `<br><strong>Response from broker service</strong>: ${data.message}`;
          }
        })
        .catch((e) => {
          output.innerHTML += `<br><br>Error: ${e}`;
        });
    });
  </script>
  {{ end }}
</div>
